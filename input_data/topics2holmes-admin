#!/usr/bin/env python 
#-*- coding:utf-8 -*- 

#TODO:
# 1. definir corretamente o mapeamento manual de algumas propriedades  //DONE
# 2. agrupar propriedades do mesmo fluxo (que ocorra mais de uma vez no topics.py) //DONE

import topics
import re
import os
import sys

sys.path.append('samples/')

OUTPUT_DIR='samples/'

def pre_conf():
  
  custom_props = dict()
  #insert customized stream here
  #custom_props = {'property_1': 'type_1',
  #                'property_2': 'type_2',
  #                'property_3': 'type_3'
  #               }
  return custom_props;

def group_regexps_by_eventtype(keys_list):

  streams = {}
  for key in keys_list:
    eventtype = topics.expressions[key][0]['eventtype']
    if eventtype not in streams.keys():
      streams[eventtype] = []
      streams[eventtype].append(topics.expressions[key][0]['regexps'])  	 
  return streams


def parse_regexps(re_props_list, custom_props):
 
  final_list = list()
  final_list.append(("host", "STRING", "IDENTIFIER"))
  final_list.append(("downtime", "INT", "VALUE"))

  #regexp to capture everything that's surrounded by parenthesis except escaped ones
  group_regex = re.compile(r'((?<!\\)\((?!\?).+?\))')

  matched_groups = []
  properties = []
  for i in range(len(re_props_list)):
    matched_groups.append(group_regex.findall(re_props_list[i]['regexp']))
    properties.append(re_props_list[i]['properties'])

  #make flat lists
  properties = sum(properties, [])
  matched_groups = sum(matched_groups, [])

  if len(matched_groups) != len(properties):
      print "\nDifferent number of properties"
      print "Aborting..."
      sys.exit(-1)

  for i, value in enumerate(matched_groups):
    if 'OK' in value or "WARNING" in value or "CRITICAL" in value:
      final_list.append((properties[i], "STRING", "VALUE"))
      continue
    if '.+' in value or '\S+' in value or '[\S]+' or '.*' in value or '\w+' in value:
      final_list.append((properties[i], "STRING", "VALUE"))
      continue
    if '[\d.]+' in value or '[0-9.]+' in value:
      final_list.append((properties[i], "FLOAT", "VALUE"))
      continue
    if '\d' in value or '[0-9]' in value:
      final_list.append((properties[i], "INT", "VALUE"))
      continue
    final_list.append((properties[i], "STRING", "VALUE"))
  
  final_list_props = list()
  for i in final_list:
    final_list_props.append(i[0])
  props_to_be_replaced = list(set(final_list_props) & set(custom_props.keys()))
  for r,i in enumerate(final_list):
    for item in props_to_be_replaced:
      if i[0] == item:
        temp_item = list(i)
        temp_item[1] = custom_props[item]
        final_list[r] = temp_item

  return final_list

def write_file(final_list, filename):

  #remove duplicates
  final_list = dict((x[0], x) for x in final_list).values()  

  #write to file
  if not os.path.exists(OUTPUT_DIR):
    os.mkdir(OUTPUT_DIR)
  file = open(OUTPUT_DIR + filename + '.py', 'w')
  string = "PROPERTIES = [" 
  print >> file, string
  for item in final_list:
    print >> file, "  %s, " % str(item)
  print >> file, "]"
  file.close()

if __name__ == "__main__":
  custom_props = pre_conf()
  keys_list = topics.expressions.keys()
  print 'The following streams have been created: \n'
  
  streams = group_regexps_by_eventtype(keys_list)
  for key in streams:
    final_list = parse_regexps(streams[key][0], custom_props)
    filename = key
    print '\'' + filename + '\',',
    write_file(final_list, filename)
